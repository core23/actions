name: 'Continuous Integration'

on:
  workflow_call:
    inputs:
      PHP_EXTENSIONS:
        default: ''
        required: false
        type: string
      PHP_VERSIONS:
        default: '8.1,8.2'
        required: false
        type: string
      SYMFONY_VERSIONS:
        default: '5.4,6.2,6.3'
        required: false
        type: string
      SYMFONY_KERNEL:
        default: ''
        required: false
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:
  generate-matrix:
    name: "Generate test matrix"

    runs-on: "ubuntu-latest"

    steps:
      - id: "set-php-matrix"
        uses: "actions/github-script@v6"
        env:
          PHP_VERSIONS: '${{ inputs.PHP_VERSIONS }}'
        with:
          script: |
            const { PHP_VERSIONS } = process.env
            return "[\"" + (PHP_VERSIONS.split(",").map(s => s.trim()).join("\", \"")) + "\"]"
          result-encoding: string

      - id: "set-symfony-matrix"
        uses: "actions/github-script@v6"
        env:
          SYMFONY_VERSIONS: '${{ inputs.SYMFONY_VERSIONS }}'
        with:
          script: |
            const { SYMFONY_VERSIONS } = process.env
            return "[\"" + (SYMFONY_VERSIONS.split(",").map(s => s.trim()).join("\", \"")) + "\"]"
          result-encoding: string

    outputs:
      php-matrix: "${{ steps.set-php-matrix.outputs.result }}"
      symfony-matrix: "${{ steps.set-symfony-matrix.outputs.result }}"


  coding-standards:
    name: "Coding Standards"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Run php-cs-fixer"
        env:
            PHP_CS_FIXER_IGNORE_ENV: 1
        run: "make cs"

  static-code-analysis:
    name: "Static Code Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          # Add curl to send data to shepherd
          extensions: "${{ inputs.PHP_EXTENSIONS }}, curl"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Run phpstan"
        run: "make phpstan"

      - name: "Run psalm"
        run: "make psalm"

      - name: "Run phpmd"
        run: "make phpmd"

  tests:
    name: "Test: PHP ${{ matrix.php-version }}, Symfony ${{ matrix.symfony }}, ${{ matrix.dependencies }})"

    needs: "generate-matrix"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version: "${{ fromJson(needs.generate-matrix.outputs.php-matrix) }}"

        symfony: "${{ fromJson(needs.generate-matrix.outputs.symfony-matrix) }}"

        dependencies:
          - "lowest"
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: 'Install Symfony Flex'
        run: | 
          composer global config --no-plugins allow-plugins.symfony/flex true
          composer global require --prefer-dist --no-progress --ansi symfony/flex

      - name: "Lock symfony version"
        run: "composer config extra.symfony.require ${{ matrix.symfony }}.*"
        if: "${{ matrix.symfony != '' }}"

      - name: "Install Composer dependencies (${{ matrix.dependencies }})"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run tests with phpunit"
        run: "make test"

  code-coverage:
    name: "Code Coverage"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Collect code coverage with pcov and phpunit"
        run: "make coverage"

      - name: "Send code coverage report to Codecov.io"
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        run: "bash <(curl -s https://codecov.io/bash)"

  mutation-tests:
    name: "Mutation Tests"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Run mutation tests with pcov and infection/infection"
        run: "make infection"

  composer:
    name: "Lint composer.json"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Lint composer.json"
        run: "make lint-composer"

  container:
    name: "Lint symfony container"

    runs-on: "ubuntu-latest"

    if: "${{ inputs.SYMFONY_KERNEL != '' }}"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Lint container"
        uses: "nucleos/symfony-console-action@1.0.0"
        with:
          kernel: "${{ inputs.SYMFONY_KERNEL }}"
          command: "lint:container"

  twig:
    name: "Lint twig files"

    runs-on: "ubuntu-latest"

    if: "${{ inputs.SYMFONY_KERNEL != '' }}"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Lint twig files"
        uses: "nucleos/symfony-console-action@1.0.0"
        with:
          kernel: "${{ inputs.SYMFONY_KERNEL }}"
          command: "lint:twig src tests --format=github"

  xliff:
    name: "Lint XLIFF files"

    runs-on: "ubuntu-latest"

    if: "${{ inputs.SYMFONY_KERNEL != '' }}"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Lint xliff files"
        uses: "nucleos/symfony-console-action@1.0.0"
        with:
          kernel: "${{ inputs.SYMFONY_KERNEL }}"
          command: "lint:xliff src tests --format=github"

  yaml:
    name: "Lint YML files"

    runs-on: "ubuntu-latest"

    if: "${{ inputs.SYMFONY_KERNEL != '' }}"

    strategy:
      matrix:
        php-version:
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          extensions: "${{ inputs.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: "Lint yaml files"
        uses: "nucleos/symfony-console-action@1.0.0"
        with:
          kernel: "${{ inputs.SYMFONY_KERNEL }}"
          command: "lint:yaml src tests --format=github"
